const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const config = require("../../config.js");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("antiraid")
    .setDescription("Anti-raid sistemi yÃ¶netimi")
    .addSubcommand(subcommand =>
      subcommand
        .setName("durum")
        .setDescription("Anti-raid sistem durumunu gÃ¶sterir")
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName("sifirla")
        .setDescription("Anti-raid durumunu sÄ±fÄ±rlar")
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName("ayarlar")
        .setDescription("Anti-raid ayarlarÄ±nÄ± gÃ¶sterir")
    ),

  async execute(interaction) {
    try {
      if (!interaction.member.roles.cache.has(config.roles.moderator) && interaction.user.id !== config.owners.sphinx) {
        return await interaction.reply({
          content: `${config.emojis.cancel} Bu komutu kullanmak iÃ§in Moderator rolÃ¼ne sahip olmalÄ±sÄ±nÄ±z.`,
          flags: ["Ephemeral"]
        });
      }

      const subcommand = interaction.options.getSubcommand();

      if (subcommand === "durum") {
        await handleStatus(interaction);
      } else if (subcommand === "sifirla") {
        await handleReset(interaction);
      } else if (subcommand === "ayarlar") {
        await handleSettings(interaction);
      }

    } catch (err) {
      await interaction.reply({
        content: `${config.emojis.cancel} Anti-raid iÅŸlemi sÄ±rasÄ±nda bir hata oluÅŸtu.`,
        flags: ["Ephemeral"]
      });
    }
  }
};

async function handleStatus(interaction) {
  const antiRaid = interaction.client.antiRaid;
  
  if (!antiRaid) {
    return await interaction.reply({
      content: `${config.emojis.cancel} Anti-raid sistemi baÅŸlatÄ±lmamÄ±ÅŸ.`,
      flags: ["Ephemeral"]
    });
  }

  const status = antiRaid.getRaidStatus();
  
  const embed = new EmbedBuilder()
    .setTitle(`${config.emojis.warning} Anti-Raid Sistemi Durumu`)
    .setDescription("Sunucu gÃ¼venlik durumu ve istatistikler")
    .addFields(
      { 
        name: `${config.emojis.stats} Sistem Durumu`, 
        value: status.detected ? "ğŸš¨ **RAID TESPÄ°T EDÄ°LDÄ°**" : "âœ… **GÃœVENLÄ°**", 
        inline: true 
      },
      { 
        name: `${config.emojis.member} Son 1 Dakika`, 
        value: `${status.recentJoins} kiÅŸi katÄ±ldÄ±`, 
        inline: true 
      },
      { 
        name: `${config.emojis.time} Raid BaÅŸlangÄ±cÄ±`, 
        value: status.startTime ? `<t:${Math.floor(status.startTime / 1000)}:R>` : "Yok", 
        inline: true 
      },
      { 
        name: `${config.emojis.info} Raid Ãœyeleri`, 
        value: status.memberCount > 0 ? `${status.memberCount} kiÅŸi` : "Yok", 
        inline: true 
      }
    )
    .setColor(status.detected ? 0xFF0000 : 0x00FF00)
    .setFooter({ text: "The Shinra | Anti-Raid Sistemi", iconURL: interaction.guild.iconURL() })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

async function handleReset(interaction) {
  const antiRaid = interaction.client.antiRaid;
  
  if (!antiRaid) {
    return await interaction.reply({
      content: `${config.emojis.cancel} Anti-raid sistemi baÅŸlatÄ±lmamÄ±ÅŸ.`,
      flags: ["Ephemeral"]
    });
  }

  antiRaid.resetRaidStatus();

  const embed = new EmbedBuilder()
    .setTitle(`${config.emojis.success} Anti-Raid SÄ±fÄ±rlandÄ±`)
    .setDescription("Anti-raid sistemi durumu baÅŸarÄ±yla sÄ±fÄ±rlandÄ±.")
    .addFields(
      { 
        name: `${config.emojis.info} YapÄ±lan Ä°ÅŸlem`, 
        value: "â€¢ Raid durumu sÄ±fÄ±rlandÄ±\nâ€¢ Ãœye listesi temizlendi\nâ€¢ Sistem normal moda geÃ§ti", 
        inline: false 
      }
    )
    .setColor(0x00FF00)
    .setFooter({ text: "The Shinra | Anti-Raid Sistemi", iconURL: interaction.guild.iconURL() })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

async function handleSettings(interaction) {
  const antiRaid = interaction.client.antiRaid;
  
  if (!antiRaid) {
    return await interaction.reply({
      content: `${config.emojis.cancel} Anti-raid sistemi baÅŸlatÄ±lmamÄ±ÅŸ.`,
      flags: ["Ephemeral"]
    });
  }

  const embed = new EmbedBuilder()
    .setTitle(`${config.emojis.info} Anti-Raid AyarlarÄ±`)
    .setDescription("Mevcut gÃ¼venlik ayarlarÄ± ve eÅŸik deÄŸerleri")
    .addFields(
      { 
        name: `${config.emojis.warning} Raid EÅŸiÄŸi`, 
        value: `${antiRaid.raidThreshold} kiÅŸi`, 
        inline: true 
      },
      { 
        name: `${config.emojis.time} Zaman Penceresi`, 
        value: `${antiRaid.raidWindow / 1000} saniye`, 
        inline: true 
      },
      { 
        name: `${config.emojis.stats} Aktif Kontroller`, 
        value: "â€¢ Otomatik ban\nâ€¢ Log bildirimi\nâ€¢ Sunucu ayarlarÄ± gÃ¼ncelleme", 
        inline: false 
      },
      { 
        name: `${config.emojis.info} NasÄ±l Ã‡alÄ±ÅŸÄ±r`, 
        value: `â€¢ ${antiRaid.raidThreshold} veya daha fazla kiÅŸi\nâ€¢ ${antiRaid.raidWindow / 1000} saniye iÃ§inde katÄ±lÄ±rsa\nâ€¢ Otomatik olarak raid tespit edilir\nâ€¢ TÃ¼m yeni katÄ±lanlar banlanÄ±r`, 
        inline: false 
      }
    )
    .setColor(0x0099FF)
    .setFooter({ text: "The Shinra | Anti-Raid Sistemi", iconURL: interaction.guild.iconURL() })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}
